"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Put = exports.Post = exports.Module = exports.Get = exports.Delete = exports.Controller = void 0;
require("reflect-metadata");
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var Module = exports.Module = function Module() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target) {
    var _opt$_auth, _opt$_name;
    var tname = target.name.replace(/Controller$/, '');
    Reflect.defineMetadata('modulePath', "/".concat(opt._path || tname.toLowerCase()), target);
    Reflect.defineMetadata('moduleAuth', (_opt$_auth = opt._auth) !== null && _opt$_auth !== void 0 ? _opt$_auth : true, target);
    Reflect.defineMetadata('moduleName', (_opt$_name = opt._name) !== null && _opt$_name !== void 0 ? _opt$_name : tname.toLowerCase(), target);
  };
};
var Get = exports.Get = function Get() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, key, desctiptor) {
    createRoute(target, key, desctiptor, opt, 'get');
  };
};
var Post = exports.Post = function Post() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, key, desctiptor) {
    createRoute(target, key, desctiptor, opt, 'post');
  };
};
var Put = exports.Put = function Put() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, key, desctiptor) {
    createRoute(target, key, desctiptor, opt, 'put');
  };
};
var Delete = exports.Delete = function Delete() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, key, desctiptor) {
    createRoute(target, key, desctiptor, opt, 'delete');
  };
};
function createRoute(target, key, desctiptor, opt, type) {
  var _opt$_auth2, _opt$_name2;
  var modulePath = Reflect.getMetadata('modulePath', target);
  if (!modulePath) {
    modulePath = Reflect.defineMetadata('modulePath', "/".concat(target.constructor.name.toLowerCase()), target.constructor);
  }
  var route = {
    path: '_path' in opt ? "/".concat(opt._path) : '',
    //`/${'_path' in opt ? opt._path : <string>key}`
    method: type,
    fn: desctiptor.value,
    auth: (_opt$_auth2 = opt._auth) !== null && _opt$_auth2 !== void 0 ? _opt$_auth2 : true,
    name: (_opt$_name2 = opt._name) !== null && _opt$_name2 !== void 0 ? _opt$_name2 : key
  };
  var routes = Reflect.getMetadata('moduleRoutes', target.constructor);
  !routes && (routes = []);
  routes.push(route);
  Reflect.defineMetadata('moduleRoutes', routes, target.constructor);
}
var Controller = exports.Controller = /*#__PURE__*/_createClass(function Controller() {
  _classCallCheck(this, Controller);
  this.ctx = void 0;
  this.moduleAuth = void 0;
  this.modulePath = void 0;
  this.moduleName = void 0;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwidCIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJyIiwiZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiTW9kdWxlIiwiZXhwb3J0cyIsIm9wdCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIl9vcHQkX2F1dGgiLCJfb3B0JF9uYW1lIiwidG5hbWUiLCJuYW1lIiwicmVwbGFjZSIsIlJlZmxlY3QiLCJkZWZpbmVNZXRhZGF0YSIsImNvbmNhdCIsIl9wYXRoIiwidG9Mb3dlckNhc2UiLCJfYXV0aCIsIl9uYW1lIiwiR2V0IiwiZGVzY3RpcHRvciIsImNyZWF0ZVJvdXRlIiwiUG9zdCIsIlB1dCIsIkRlbGV0ZSIsInR5cGUiLCJfb3B0JF9hdXRoMiIsIl9vcHQkX25hbWUyIiwibW9kdWxlUGF0aCIsImdldE1ldGFkYXRhIiwiY29uc3RydWN0b3IiLCJyb3V0ZSIsInBhdGgiLCJtZXRob2QiLCJmbiIsInZhbHVlIiwiYXV0aCIsInJvdXRlcyIsInB1c2giLCJDb250cm9sbGVyIiwiY3R4IiwibW9kdWxlQXV0aCIsIm1vZHVsZU5hbWUiXSwic291cmNlcyI6WyIuLi9zcmMvZGVjb3JhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAna29hJztcblxuZXhwb3J0IHR5cGUgUm91dGUgPSB7XG4gIHBhdGg6IHN0cmluZztcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIGZuOiAoKSA9PiB2b2lkO1xuICBhdXRoOiBib29sZWFuO1xuICBuYW1lOiBzdHJpbmc7XG59O1xuXG50eXBlIE9wdCA9IHtcbiAgX2F1dGg/OiBib29sZWFuO1xuICBfcGF0aD86IHN0cmluZztcbiAgX25hbWU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgTW9kdWxlID0gKG9wdDogT3B0ID0ge30pOiBDbGFzc0RlY29yYXRvciA9PiB7XG4gIHJldHVybiAodGFyZ2V0OiBhbnkpID0+IHtcbiAgICBsZXQgdG5hbWUgPSB0YXJnZXQubmFtZS5yZXBsYWNlKC9Db250cm9sbGVyJC8sICcnKTtcbiAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFxuICAgICAgJ21vZHVsZVBhdGgnLFxuICAgICAgYC8ke29wdC5fcGF0aCB8fCB0bmFtZS50b0xvd2VyQ2FzZSgpfWAsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoJ21vZHVsZUF1dGgnLCBvcHQuX2F1dGggPz8gdHJ1ZSwgdGFyZ2V0KTtcbiAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFxuICAgICAgJ21vZHVsZU5hbWUnLFxuICAgICAgb3B0Ll9uYW1lID8/IHRuYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IEdldCA9IChvcHQ6IE9wdCA9IHt9KTogTWV0aG9kRGVjb3JhdG9yID0+IHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcgfCBzeW1ib2wsIGRlc2N0aXB0b3I6IGFueSkgPT4ge1xuICAgIGNyZWF0ZVJvdXRlKHRhcmdldCwga2V5LCBkZXNjdGlwdG9yLCBvcHQsICdnZXQnKTtcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBQb3N0ID0gKG9wdDogT3B0ID0ge30pOiBNZXRob2REZWNvcmF0b3IgPT4ge1xuICByZXR1cm4gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZyB8IHN5bWJvbCwgZGVzY3RpcHRvcjogYW55KSA9PiB7XG4gICAgY3JlYXRlUm91dGUodGFyZ2V0LCBrZXksIGRlc2N0aXB0b3IsIG9wdCwgJ3Bvc3QnKTtcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBQdXQgPSAob3B0OiBPcHQgPSB7fSk6IE1ldGhvZERlY29yYXRvciA9PiB7XG4gIHJldHVybiAodGFyZ2V0OiBhbnksIGtleTogc3RyaW5nIHwgc3ltYm9sLCBkZXNjdGlwdG9yOiBhbnkpID0+IHtcbiAgICBjcmVhdGVSb3V0ZSh0YXJnZXQsIGtleSwgZGVzY3RpcHRvciwgb3B0LCAncHV0Jyk7XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgRGVsZXRlID0gKG9wdDogT3B0ID0ge30pOiBNZXRob2REZWNvcmF0b3IgPT4ge1xuICByZXR1cm4gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZyB8IHN5bWJvbCwgZGVzY3RpcHRvcjogYW55KSA9PiB7XG4gICAgY3JlYXRlUm91dGUodGFyZ2V0LCBrZXksIGRlc2N0aXB0b3IsIG9wdCwgJ2RlbGV0ZScpO1xuICB9O1xufTtcblxuZnVuY3Rpb24gY3JlYXRlUm91dGUoXG4gIHRhcmdldDogYW55LFxuICBrZXk6IHN0cmluZyB8IHN5bWJvbCxcbiAgZGVzY3RpcHRvcjogYW55LFxuICBvcHQ6IE9wdCxcbiAgdHlwZTogc3RyaW5nXG4pIHtcbiAgbGV0IG1vZHVsZVBhdGggPSBSZWZsZWN0LmdldE1ldGFkYXRhKCdtb2R1bGVQYXRoJywgdGFyZ2V0KTtcbiAgaWYgKCFtb2R1bGVQYXRoKSB7XG4gICAgbW9kdWxlUGF0aCA9IFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXG4gICAgICAnbW9kdWxlUGF0aCcsXG4gICAgICBgLyR7dGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWUudG9Mb3dlckNhc2UoKX1gLFxuICAgICAgdGFyZ2V0LmNvbnN0cnVjdG9yXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHJvdXRlOiBSb3V0ZSA9IHtcbiAgICBwYXRoOiAnX3BhdGgnIGluIG9wdCA/IGAvJHtvcHQuX3BhdGh9YCA6ICcnLCAvL2AvJHsnX3BhdGgnIGluIG9wdCA/IG9wdC5fcGF0aCA6IDxzdHJpbmc+a2V5fWBcbiAgICBtZXRob2Q6IHR5cGUsXG4gICAgZm46IGRlc2N0aXB0b3IudmFsdWUsXG4gICAgYXV0aDogb3B0Ll9hdXRoID8/IHRydWUsXG4gICAgbmFtZTogb3B0Ll9uYW1lID8/IChrZXkgYXMgc3RyaW5nKSxcbiAgfTtcbiAgbGV0IHJvdXRlcyA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoJ21vZHVsZVJvdXRlcycsIHRhcmdldC5jb25zdHJ1Y3Rvcik7XG4gICFyb3V0ZXMgJiYgKHJvdXRlcyA9IFtdKTtcbiAgcm91dGVzLnB1c2gocm91dGUpO1xuICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKCdtb2R1bGVSb3V0ZXMnLCByb3V0ZXMsIHRhcmdldC5jb25zdHJ1Y3Rvcik7XG59XG5cbmludGVyZmFjZSBOZXdzdENvbnRleHQgZXh0ZW5kcyBDb250ZXh0IHtcbiAgdmVyaWZ5UGFyYW1zOiAoYXJnMDogb2JqZWN0KSA9PiBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sbGVyIHtcbiAgY3R4ITogTmV3c3RDb250ZXh0O1xuICBtb2R1bGVBdXRoITogYm9vbGVhbjtcbiAgbW9kdWxlUGF0aCE6IHN0cmluZztcbiAgbW9kdWxlTmFtZSE6IHN0cmluZztcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBQSxPQUFBO0FBQTBCLFNBQUFDLGtCQUFBQyxNQUFBLEVBQUFDLEtBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELEtBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLFVBQUEsR0FBQUgsS0FBQSxDQUFBQyxDQUFBLEdBQUFFLFVBQUEsQ0FBQUMsVUFBQSxHQUFBRCxVQUFBLENBQUFDLFVBQUEsV0FBQUQsVUFBQSxDQUFBRSxZQUFBLHdCQUFBRixV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Q1hXLEdBQW9CLEVBQ3BCcUMsVUFBZSxFQUNmaEIsR0FBUSxFQUNScUIsSUFBWSxFQUNaO0VBQUEsSUFBQUMsV0FBQSxFQUFBQyxXQUFBO0VBQ0EsSUFBSUMsVUFBVSxHQUFHaEIsT0FBTyxDQUFDaUIsV0FBVyxDQUFDLFlBQVksRUFBRXpELE1BQU0sQ0FBQztFQUMxRCxJQUFJLENBQUN3RCxVQUFVLEVBQUU7SUFDZkEsVUFBVSxHQUFHaEIsT0FBTyxDQUFDQyxjQUFjLENBQ2pDLFlBQVksTUFBQUMsTUFBQSxDQUNSMUMsTUFBTSxDQUFDMEQsV0FBVyxDQUFDcEIsSUFBSSxDQUFDTSxXQUFXLENBQUMsQ0FBQyxHQUN6QzVDLE1BQU0sQ0FBQzBELFdBQ1QsQ0FBQztFQUNIO0VBRUEsSUFBTUMsS0FBWSxHQUFHO0lBQ25CQyxJQUFJLEVBQUUsT0FBTyxJQUFJNUIsR0FBRyxPQUFBVSxNQUFBLENBQU9WLEdBQUcsQ0FBQ1csS0FBSyxJQUFLLEVBQUU7SUFBRTtJQUM3Q2tCLE1BQU0sRUFBRVIsSUFBSTtJQUNaUyxFQUFFLEVBQUVkLFVBQVUsQ0FBQ2UsS0FBSztJQUNwQkMsSUFBSSxHQUFBVixXQUFBLEdBQUV0QixHQUFHLENBQUNhLEtBQUssY0FBQVMsV0FBQSxjQUFBQSxXQUFBLEdBQUksSUFBSTtJQUN2QmhCLElBQUksR0FBQWlCLFdBQUEsR0FBRXZCLEdBQUcsQ0FBQ2MsS0FBSyxjQUFBUyxXQUFBLGNBQUFBLFdBQUEsR0FBSzVDO0VBQ3RCLENBQUM7RUFDRCxJQUFJc0QsTUFBTSxHQUFHekIsT0FBTyxDQUFDaUIsV0FBVyxDQUFDLGNBQWMsRUFBRXpELE1BQU0sQ0FBQzBELFdBQVcsQ0FBQztFQUNwRSxDQUFDTyxNQUFNLEtBQUtBLE1BQU0sR0FBRyxFQUFFLENBQUM7RUFDeEJBLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUCxLQUFLLENBQUM7RUFDbEJuQixPQUFPLENBQUNDLGNBQWMsQ0FBQyxjQUFjLEVBQUV3QixNQUFNLEVBQUVqRSxNQUFNLENBQUMwRCxXQUFXLENBQUM7QUFDcEU7QUFBQyxJQU1ZUyxVQUFVLEdBQUFwQyxPQUFBLENBQUFvQyxVQUFBLGdCQUFBdkQsWUFBQSxVQUFBdUQsV0FBQTtFQUFBdkMsZUFBQSxPQUFBdUMsVUFBQTtFQUFBLEtBQ3JCQyxHQUFHO0VBQUEsS0FDSEMsVUFBVTtFQUFBLEtBQ1ZiLFVBQVU7RUFBQSxLQUNWYyxVQUFVO0FBQUEiLCJpZ25vcmVMaXN0IjpbXX0=