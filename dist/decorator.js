"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Put = exports.Post = exports.Module = exports.Get = exports.Delete = exports.Controller = void 0;
require("reflect-metadata");
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var Module = exports.Module = function Module() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target) {
    var _opt$_auth, _opt$_name;
    var tname = target.name.replace(/Controller$/, '');
    Reflect.defineMetadata('modulePath', "/".concat(opt._path || tname.toLowerCase()), target);
    Reflect.defineMetadata('moduleAuth', (_opt$_auth = opt._auth) !== null && _opt$_auth !== void 0 ? _opt$_auth : true, target);
    Reflect.defineMetadata('moduleName', (_opt$_name = opt._name) !== null && _opt$_name !== void 0 ? _opt$_name : tname.toLowerCase(), target);
  };
};
var Get = exports.Get = function Get() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, key, desctiptor) {
    createRoute(target, key, desctiptor, opt, 'get');
  };
};
var Post = exports.Post = function Post() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, key, desctiptor) {
    createRoute(target, key, desctiptor, opt, 'post');
  };
};
var Put = exports.Put = function Put() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, key, desctiptor) {
    createRoute(target, key, desctiptor, opt, 'put');
  };
};
var Delete = exports.Delete = function Delete() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (target, key, desctiptor) {
    createRoute(target, key, desctiptor, opt, 'delete');
  };
};
function createRoute(target, key, desctiptor, opt, type) {
  var _opt$_auth2, _opt$_name2, _opt$_desc;
  var modulePath = Reflect.getMetadata('modulePath', target);
  if (!modulePath) {
    modulePath = Reflect.defineMetadata('modulePath', "/".concat(target.constructor.name.toLowerCase()), target.constructor);
  }
  var route = {
    path: '_path' in opt ? "/".concat(opt._path) : '',
    //`/${'_path' in opt ? opt._path : <string>key}`
    method: type,
    fn: desctiptor.value,
    auth: (_opt$_auth2 = opt._auth) !== null && _opt$_auth2 !== void 0 ? _opt$_auth2 : true,
    name: (_opt$_name2 = opt._name) !== null && _opt$_name2 !== void 0 ? _opt$_name2 : key,
    desc: (_opt$_desc = opt._desc) !== null && _opt$_desc !== void 0 ? _opt$_desc : ''
  };
  var routes = Reflect.getMetadata('moduleRoutes', target.constructor);
  !routes && (routes = []);
  routes.push(route);
  Reflect.defineMetadata('moduleRoutes', routes, target.constructor);
}
var Controller = exports.Controller = /*#__PURE__*/_createClass(function Controller() {
  _classCallCheck(this, Controller);
  this.ctx = void 0;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,