"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreateServer = CreateServer;
var _koa = _interopRequireDefault(require("koa"));
var _koaRouter = _interopRequireDefault(require("koa-router"));
var _koaBody = _interopRequireDefault(require("koa-body"));
var _koaStatic = _interopRequireDefault(require("koa-static"));
var _utils = require("./utils");
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
require('dotenv').config();
var router = new _koaRouter["default"]({
  strict: true
});
function CreateServer(options) {
  var _options$socketIoConf;
  var routes = [];
  var _iterator = _createForOfIteratorHelper(options.controllers),
    _step;
  try {
    var _loop = function _loop() {
      var builder = _step.value;
      var instance = {
        moduleName: Reflect.getMetadata('moduleName', builder),
        modulePath: Reflect.getMetadata('modulePath', builder),
        moduleAuth: Reflect.getMetadata('moduleAuth', builder),
        moduleRoutes: Reflect.getMetadata('moduleRoutes', builder)
      };
      if (!instance.moduleRoutes || instance.moduleRoutes.length === 0) {
        return 1; // continue
      }
      instance.moduleRoutes.sort(function (a, b) {
        return a.path.includes(':') - b.path.includes(':');
      });
      var _loop2 = function _loop2(key) {
        var path = instance.modulePath + instance.moduleRoutes[key].path;
        routes.push({
          path: path,
          method: instance.moduleRoutes[key].method,
          auth: instance.moduleRoutes[key].auth,
          name: instance.moduleRoutes[key].name,
          pname: instance.moduleName
        });
        router[instance.moduleRoutes[key].method](path, /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ctx, next) {
            var _options$jwt2;
            var _options$jwt3, signInfo, fliterObjects, _iterator3, _step3, _key;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  console.log('\x1b[44m%s\x1b[0m', "[Route] ".concat(instance.moduleRoutes[key].name, "  path:").concat(path, "  method:").concat(instance.moduleRoutes[key].method, "  ").concat(new Date().toLocaleString(), "  "));
                  ctx.request.body && Object.keys(ctx.request.body).length > 0 && console.table(ctx.request.body);
                  ctx.query && console.table(ctx.query);
                  ctx.param && console.table(ctx.param);
                  if (!(!((_options$jwt2 = options.jwt) !== null && _options$jwt2 !== void 0 && _options$jwt2.enable) || instance.moduleAuth === false || !instance.moduleRoutes[key].auth)) {
                    _context2.next = 9;
                    break;
                  }
                  _context2.next = 7;
                  return next();
                case 7:
                  _context2.next = 26;
                  break;
                case 9:
                  _context2.prev = 9;
                  _context2.next = 12;
                  return (0, _utils.checkJwt)(ctx, ((_options$jwt3 = options.jwt) === null || _options$jwt3 === void 0 ? void 0 : _options$jwt3.secret) || '');
                case 12:
                  signInfo = _context2.sent;
                  fliterObjects = {};
                  _iterator3 = _createForOfIteratorHelper(options.jwt.fields);
                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                      _key = _step3.value;
                      if (signInfo.hasOwnProperty(_key)) {
                        fliterObjects[_key] = signInfo[_key];
                      }
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }
                  ctx.state.user = fliterObjects;
                  _context2.next = 19;
                  return next();
                case 19:
                  _context2.next = 26;
                  break;
                case 21:
                  _context2.prev = 21;
                  _context2.t0 = _context2["catch"](9);
                  console.log(_context2.t0);
                  ctx.response.status = 401;
                  return _context2.abrupt("return", ctx.body = {
                    code: 401,
                    message: 'auth fail',
                    data: null
                  });
                case 26:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[9, 21]]);
          }));
          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        }(), /*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(ctx, next) {
            var _iterator4, _step4, _middleware;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (!(options.routerMiddwares && options.routerMiddwares.length > 0)) {
                    _context3.next = 20;
                    break;
                  }
                  _iterator4 = _createForOfIteratorHelper(options.routerMiddwares);
                  _context3.prev = 2;
                  _iterator4.s();
                case 4:
                  if ((_step4 = _iterator4.n()).done) {
                    _context3.next = 10;
                    break;
                  }
                  _middleware = _step4.value;
                  _context3.next = 8;
                  return _middleware(ctx, next);
                case 8:
                  _context3.next = 4;
                  break;
                case 10:
                  _context3.next = 15;
                  break;
                case 12:
                  _context3.prev = 12;
                  _context3.t0 = _context3["catch"](2);
                  _iterator4.e(_context3.t0);
                case 15:
                  _context3.prev = 15;
                  _iterator4.f();
                  return _context3.finish(15);
                case 18:
                  _context3.next = 22;
                  break;
                case 20:
                  _context3.next = 22;
                  return next();
                case 22:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, null, [[2, 12, 15, 18]]);
          }));
          return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
          };
        }(), /*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(ctx, next) {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.prev = 0;
                  _context4.next = 3;
                  return instance.moduleRoutes[key].fn.apply({
                    ctx: ctx
                  });
                case 3:
                  return _context4.abrupt("return", _context4.sent);
                case 6:
                  _context4.prev = 6;
                  _context4.t0 = _context4["catch"](0);
                  console.log(_context4.t0);
                  ctx.response.status = 500;
                  return _context4.abrupt("return", ctx.body = {
                    code: 500,
                    data: null
                  });
                case 11:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, null, [[0, 6]]);
          }));
          return function (_x7, _x8) {
            return _ref4.apply(this, arguments);
          };
        }());
      };
      for (var key in instance.moduleRoutes) {
        _loop2(key);
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      if (_loop()) continue;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var app = new _koa["default"]();
  app.use( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ctx, next) {
      var key;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (options.cors) {
              for (key in options.cors) {
                ctx.set(key, options.cors[key]);
              }
            }
            if (!(ctx.method === 'OPTIONS')) {
              _context.next = 5;
              break;
            }
            ctx.body = 200;
            _context.next = 7;
            break;
          case 5:
            _context.next = 7;
            return next();
          case 7:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }()).use((0, _koaBody["default"])({
    multipart: true,
    formidable: {
      uploadDir: options.uploadConfig.uploadDir,
      keepExtensions: true,
      maxFileSize: options.uploadConfig.maxFileSize * 1024,
      onFileBegin: function onFileBegin(name, file) {
        var ext = _path["default"].extname(file.originalFilename);
        if (!options.uploadConfig.allowExts.includes(ext.substring(1).toLowerCase())) {
          throw new Error('not allow ext');
        } else {
          return file;
        }
      }
    }
  })).use((0, _koaStatic["default"])(options.staticDir));
  if (options.middlewares) {
    var _iterator2 = _createForOfIteratorHelper(options.middlewares),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var middleware = _step2.value;
        app.use(middleware);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  app.use(router.routes()).use(router.allowedMethods());
  var server = app.listen(options.port);
  app.context.permissionRoutes = routes;
  if (options !== null && options !== void 0 && (_options$socketIoConf = options.socketIoConfig) !== null && _options$socketIoConf !== void 0 && _options$socketIoConf.allow) {
    app.context.socketIO = require('socket.io')(server, {
      cors: {
        origin: '*',
        methods: ['GET', 'POST'],
        credentials: true
      }
    });
    app.context.socketIO.on('connection', function (socket) {
      console.log('a user connected');
    });
    app.context.socketIO.use(function (socket, next) {
      var _options$jwt;
      (0, _utils.signJwt)(socket, next, ((_options$jwt = options.jwt) === null || _options$jwt === void 0 ? void 0 : _options$jwt.secret) || '', options.socketIoConfig.unsignedHost, options.socketIoConfig.unsignedDelay);
    });
  }
  return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,